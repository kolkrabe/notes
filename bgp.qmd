---
title: "BGP"
editor: visual
code-block-bg: dark
---

# General Info

-   Used **TCP 179** **to** establish session. TTL=1
-   Admin Distance: iBGP AD = **200**, eBGP AD = **20**
-   Use of TCP allows for adjacencies with non directly connected neighbour.
-   Multi-hop session require underlying routes................... from RIB (dynamic or static) Must explicitly configure neighbour relationships
    -   TCP session established
    -   Advertises Address Prefix & Length (called Network Layer Reachability Information - NLRI)
-   Hold Time: **180s**, Keepalive: **60s** (1/3 ratio)
    -   Adjust under bgp process with `timers bgp 5 20` - keepalive 5 / hold 20
-   Uses Address families to
-   AFI/SAFI - Address & Subsequent Address Family Identifiers (ipv4 unicast etc).
-   Modern BGP sets DF bit (do not fragment) to prevent fragmentation.
-   NLRI - Network Layer Reachability Information = Prefix Length + Prefix
-   BGP RID - If not manually configured (which is recommended)
    -   Highest IP on Loopback int that's up
    -   Highest IP on any other Interface thats up
-   BGP Synchronisation - disabled on modern devices by default
    -   RULE: Only advertise routes learned from iBGP peer to an eBGP peer when there is an exact match of that route learned from an IGP in the routing table.
-   **iBGP**
    -   TTL = 255
    -   Uses split horizon for loop prevention, requires full mesh of BGP routers inside single AS
        -   A route learned from 1 iBGP won't be forwarded to another iBGP peer by default.
-   **eBGP**
    -   TTL = 1, this can be increased using `neighbor [ip] ebgp-multihop [1-255]`
    -   Can also use `neighbor [ip] ttl-security hops [hop-count]`
    -   Difference = `eBGP-multihop` = sets *maximum range* allowed, `TTL-security` sets *exact range*
-   If peering with different update source but not through additional hops, can use `neighbor <ip> disable-connected-check`
-   Does change next-hop by default
-   It's recommended to update source to a loopback for resiliency `neighbor [ip] update-source [loopback]`

# Features

## Path Selection

-   Highest Weight
-   Highest Local Preference (LOCAL_PREF)
-   Originates from Local Router
-   Shortest AS path
-   Lowest Origin Code (i then e then ?)
-   Lowest MED
-   Prefer eBGP over iBGP
-   Choose route through nearest IGP neighbour by lowest metric
-   Chose the oldest route
-   Choose path through neighbour with **lowest** RID
-   Choose path with minimum cluster list length
-   Choose path through neighbour with lowest IP address

## Route Reflector

-   Allows route learned from iBGP neighbour can be reflected to neighbours in same ASN - negates need for full mesh
-   Configured using `neighbour [ip] route-reflector-client` on the route reflector
-   3 rules:
    -   Routes learned from eBGP peers can be sent to other eBGP peers, clients, and non-clients.
    -   Routes learned from client peers can be sent to eBGP peers, other client peers, and non-clients.
    -   Routes learned from non-client peers can be sent to eBGP peers, and client peers,Â *but not other non-clients*.
-   `next-hop-self` only affects eBGP routes when used with route reflectors.

## Summarisation

-   Configured on AS Edge Routers.
-   configured with `aggregate-address 10.0.0.0 255.0.0.0 [summary-only]`
    -   use of `summary-only` advertises only summary route, not the aggregated networks
-   These routes are assigned the ***ATOMIC_AGGREGATE*** attribute to indicate they are aggregates
-   The summarising router adds an entry in their RIB with destination Null0 to avoid loops.
-   

------------------------------------------------------------------------

# BGP Configuration

------------------------------------------------------------------------

# Useful Show Commmands

-   `show bgp ipv4 unicast` - shows the bgp table
-   `show bgp ipv4 unicast neighbors 10.1.1.2 advertised-routes` - shows which routes are being advertised to neighbour 10.1.1.2
-   `show bgp ipv4 unicast summary` - shows exchange of routes between nodes
-   
