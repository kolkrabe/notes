---
title: "BGP"
editor: visual
code-block-bg: dark
---

# General Info

-   Used **TCP 179** **to** establish session. Unicast
-   Admin Distance: iBGP AD = **200**, eBGP AD = **20**
-   Use of TCP allows for adjacencies with non directly connected neighbour.
-   Only **Best route** + **next hop** are advertised, not all routes.
-   Multi-hop session require underlying routes from RIB (dynamic or static) Must explicitly configure neighbour relationships
    -   TCP session established
    -   Advertises Address Prefix & Length (called Network Layer Reachability Information - NLRI)
-   Hold Time: **180s**, Keepalive: **60s** (1/3 ratio)
    -   Adjust under bgp process with `timers bgp 5 20` - keepalive 5 / hold 20
-   Uses Address families to
-   AFI/SAFI - Address & Subsequent Address Family Identifiers (ipv4 unicast etc).
-   Modern BGP sets DF bit (do not fragment) to prevent fragmentation.
-   BGP RID - If not manually configured (which is recommended)
    -   Highest IP on Loopback int that's up
    -   Highest IP on any other Interface thats up
-   BGP Synchronisation - disabled on modern devices by default
    -   RULE: Only advertise routes learned from iBGP peer to an eBGP peer when there is an exact match of that route learned from an IGP in the routing table.
-   **iBGP**
    -   TTL = 255
    -   Uses split horizon for loop prevention, requires full mesh of BGP routers inside single AS
        -   A route learned from 1 iBGP won't be forwarded to another iBGP peer by default.
        -   This can be overcome with route-reflectors
    -   NRLI's from iBGP peer can only be forwarded to eBGP peer.
-   **eBGP**
    -   TTL = 1, this can be increased using `neighbor [ip] ebgp-multihop [1-255]`
    -   Can also use `neighbor [ip] ttl-security hops [hop-count]`
    -   Difference = `eBGP-multihop` = sets *maximum range* allowed, `TTL-security` sets *exact range*
-   If peering with different update source but not through additional hops, can use `neighbor <ip> disable-connected-check`
-   Does change next-hop by default
-   It's recommended to update source to a loopback for resiliency `neighbor [ip] update-source [loopback]`
-   NRLI from eBGP can be shared onto all other peers.

# Features

## Path Selection

**W**e **L**ove **O**ranges **AS** **O**ranges **M**ean **P**ure **R**efreshment

1.  Weight (Highest)
2.  Local Preference (Highest)
3.  Originated locally
4.  AS_PATH (Shortest)
5.  Origin code (IGP \> EGP \> ?)
6.  MED (Lowest)
7.  Path (eBGP \> iBGP)
8.  IGP metric (Lowest)
9.  Route age (Oldest, only compared when routes from different eBGP peers)
10. RID (Lowest)
11. Choose path with minimum cluster list length
12. Choose path through neighbour with lowest IP address

## Route Reflector

-   Allows route learned from iBGP neighbour can be reflected to neighbours in same ASN - negates need for full mesh
-   Configured using `neighbour [ip] route-reflector-client` on the route reflector
-   3 rules:
    -   Routes learned from eBGP peers can be sent to other eBGP peers, clients, and non-clients.
    -   Routes learned from client peers can be sent to eBGP peers, other client peers, and non-clients.
    -   Routes learned from non-client peers can be sent to eBGP peers, and client peers,Â *but not other non-clients*.
-   `next-hop-self` only affects eBGP routes when used with route reflectors.

## Summarisation

-   Configured on AS Edge Routers.
-   configured with `aggregate-address 10.0.0.0 255.0.0.0 [summary-only] [as-set]`
    -   use of `summary-only` advertises only summary route, not the aggregated networks
    -   use of `[as-set]` carries over AS_Path attributes from component routes.
-   These routes are assigned the ***ATOMIC_AGGREGATE*** attribute to indicate they are aggregates & that loss of path info has occurred.
-   The summarising router adds an entry in their RIB with destination Null0 to avoid loops.
-   AS_Path, MED +communities aren't included in new prefix info
-   Can include AS_Path info using `as-set`

## **BGP regexp**

-   Can be used to search for specifc AS-PATHs in table - for example: `show ip bgp regexp ^$`
-   Above will show prefixes originated locally with the AS. Cheat sheet [here.](http://gponsolution.com/bgp-regular-expressions-cheat-sheet.html)
-   Can be used to filter with ACLs with ip as-path: `ip as-path access-list 1 permit _54$`
-   Then use `match as-path` under a route-map to apply modifications

------------------------------------------------------------------------

# BGP Configuration

------------------------------------------------------------------------

# Useful Show Commmands

-   `show bgp ipv4 unicast` - shows the bgp table
-   `show bgp ipv4 unicast neighbors 10.1.1.2 advertised-routes` - shows which routes are being advertised to neighbour 10.1.1.2
-   `show bgp ipv4 unicast summary` - shows exchange of routes between nodes
-   
